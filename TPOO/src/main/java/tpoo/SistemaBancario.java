package tpoo;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class SistemaBancario extends javax.swing.JFrame {
    private final ModeloTabelaCliente modelo = new ModeloTabelaCliente();
    private final ModeloTabelaCliente modeloVincularConta = new ModeloTabelaCliente();
    
    private final ModeloTabelaContaCorrente modeloContaCorrente = new ModeloTabelaContaCorrente();
    private final ModeloTabelaContaInvestimento modeloContaInvestimento = new ModeloTabelaContaInvestimento();
    
    private final List<Cliente> listaDeClientes = new ArrayList();
    private final List<ContaCorrente> listaDeContasCorrente = new ArrayList();
    private final List<ContaInvestimento> listaDeContasInvestimento = new ArrayList();
    
    private final List<ContaCorrente> listaManipulaContaCorrente = new ArrayList();
    private final List<ContaInvestimento> listaManipulaContaInvestimento = new ArrayList();
    
    private int linhaClicada = -1;
    private int linhaClicadaVincularConta = -1;
    private int linhaClicadaManipularConta = -1;
    
    private int idContador = 1;
    private int numeroContadorCorrente = 1;
    private int numeroContadorInvestimento = 1;
    
    JFrame jFrame = new JFrame();
    /**
     * Creates new form NovoJFrame2
     */
    public SistemaBancario() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Guias = new javax.swing.JTabbedPane();
        tabCadastrarCliente = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        Nome = new javax.swing.JLabel();
        tNome = new javax.swing.JTextField();
        Sobrenome = new javax.swing.JLabel();
        tSobrenome = new javax.swing.JTextField();
        RG = new javax.swing.JLabel();
        tRG = new javax.swing.JTextField();
        CPF = new javax.swing.JLabel();
        tCPF = new javax.swing.JTextField();
        Salario = new javax.swing.JLabel();
        tSalario = new javax.swing.JTextField();
        Endereco = new javax.swing.JLabel();
        tEndereco = new javax.swing.JTextField();
        incluir = new java.awt.Button();
        excluir = new java.awt.Button();
        alterar = new java.awt.Button();
        listar = new java.awt.Button();
        limpar = new java.awt.Button();
        Ordenar = new javax.swing.JLabel();
        cbOrdenar = new javax.swing.JComboBox<>();
        ListarPor = new javax.swing.JLabel();
        tListarPor = new javax.swing.JTextField();
        cbListarPor = new javax.swing.JComboBox<>();
        tabVincularConta = new javax.swing.JPanel();
        selecioneCliente = new javax.swing.JLabel();
        scroll1 = new javax.swing.JScrollPane();
        tabelaVincularConta = new javax.swing.JTable();
        selecioneTipoConta = new javax.swing.JLabel();
        cbContas = new javax.swing.JComboBox<>();
        label1VincularConta = new javax.swing.JLabel();
        tLabel1VincularConta = new javax.swing.JTextField();
        label2VincularConta = new javax.swing.JLabel();
        tLabel2VincularConta = new javax.swing.JTextField();
        label3VincularConta = new javax.swing.JLabel();
        tLabel3VincularConta = new javax.swing.JTextField();
        incluirConta = new java.awt.Button();
        tabManipularConta = new javax.swing.JPanel();
        informarCPF = new javax.swing.JLabel();
        tInformarCPF = new javax.swing.JTextField();
        Informar = new java.awt.Button();
        scroll2 = new javax.swing.JScrollPane();
        tabelaManipularConta = new javax.swing.JTable();
        saque = new javax.swing.JLabel();
        tSaque = new javax.swing.JTextField();
        Sacar = new java.awt.Button();
        deposito = new javax.swing.JLabel();
        tDeposito = new javax.swing.JTextField();
        Depositar = new java.awt.Button();
        VerSaldo = new java.awt.Button();
        Remunerar = new java.awt.Button();
        saldoAtual = new javax.swing.JLabel();
        verSaldo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabela.setModel(modelo);
        tabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMouseClicked(evt);
            }
        });
        scroll.setViewportView(tabela);

        Nome.setText("Nome:");

        Sobrenome.setText("Sobrenome:");

        RG.setText("RG:");

        CPF.setText("CPF:");

        Salario.setText("Salário:");

        Endereco.setText("Endereço:");

        incluir.setBackground(new java.awt.Color(33, 136, 56));
        incluir.setForeground(new java.awt.Color(240, 240, 240));
        incluir.setLabel("Incluir");
        incluir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                incluirMouseClicked(evt);
            }
        });

        excluir.setBackground(new java.awt.Color(220, 53, 69));
        excluir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        excluir.setForeground(new java.awt.Color(240, 240, 240));
        excluir.setLabel("Excluir");
        excluir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                excluirMouseClicked(evt);
            }
        });

        alterar.setBackground(new java.awt.Color(224, 168, 0));
        alterar.setLabel("Alterar");
        alterar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                alterarMouseClicked(evt);
            }
        });

        listar.setBackground(new java.awt.Color(0, 105, 217));
        listar.setForeground(new java.awt.Color(240, 240, 240));
        listar.setLabel("Listar");
        listar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listarMouseClicked(evt);
            }
        });

        limpar.setBackground(new java.awt.Color(19, 132, 150));
        limpar.setForeground(new java.awt.Color(240, 240, 240));
        limpar.setLabel("Limpar");
        limpar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                limparMouseClicked(evt);
            }
        });

        Ordenar.setText("Ordenar por:");

        cbOrdenar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Nome", "Sobrenome", "Salário" }));
        cbOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOrdenarActionPerformed(evt);
            }
        });

        ListarPor.setText("Listar por:");

        tListarPor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tListarPorKeyReleased(evt);
            }
        });

        cbListarPor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nome", "Sobrenome", "RG", "CPF" }));
        cbListarPor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbListarPorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabCadastrarClienteLayout = new javax.swing.GroupLayout(tabCadastrarCliente);
        tabCadastrarCliente.setLayout(tabCadastrarClienteLayout);
        tabCadastrarClienteLayout.setHorizontalGroup(
            tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCadastrarClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll)
                    .addGroup(tabCadastrarClienteLayout.createSequentialGroup()
                        .addComponent(Ordenar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(ListarPor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbListarPor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tListarPor))
                    .addGroup(tabCadastrarClienteLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(tabCadastrarClienteLayout.createSequentialGroup()
                                .addComponent(incluir, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(excluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(alterar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(listar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(limpar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabCadastrarClienteLayout.createSequentialGroup()
                                    .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Salario)
                                        .addComponent(CPF)
                                        .addComponent(Endereco))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(tSalario, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(tCPF, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(tEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabCadastrarClienteLayout.createSequentialGroup()
                                    .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Sobrenome)
                                        .addComponent(Nome)
                                        .addComponent(RG))
                                    .addGap(18, 18, 18)
                                    .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(tNome)
                                        .addComponent(tSobrenome)
                                        .addComponent(tRG, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tabCadastrarClienteLayout.setVerticalGroup(
            tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCadastrarClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ordenar)
                    .addComponent(ListarPor)
                    .addComponent(tListarPor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbListarPor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Nome)
                    .addComponent(tNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tSobrenome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Sobrenome))
                .addGap(10, 10, 10)
                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tRG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RG))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CPF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Salario, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Endereco))
                .addGap(19, 19, 19)
                .addGroup(tabCadastrarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(incluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(excluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alterar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(limpar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        Guias.addTab("Cadastrar Cliente", tabCadastrarCliente);

        tabVincularConta.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                tabVincularContaComponentShown(evt);
            }
        });

        selecioneCliente.setText("Selecione um cliente:");

        tabelaVincularConta.setModel(modelo);
        tabelaVincularConta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaVincularContaMouseClicked(evt);
            }
        });
        scroll1.setViewportView(tabelaVincularConta);

        selecioneTipoConta.setText("Escolha qual será o tipo de conta do cliente selecionado na tabela:");

        cbContas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Conta Corrente", "Conta Investimento" }));
        cbContas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbContasItemStateChanged(evt);
            }
        });

        incluirConta.setBackground(new java.awt.Color(33, 136, 56));
        incluirConta.setForeground(new java.awt.Color(240, 240, 240));
        incluirConta.setLabel("Incluir");
        incluirConta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                incluirContaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout tabVincularContaLayout = new javax.swing.GroupLayout(tabVincularConta);
        tabVincularConta.setLayout(tabVincularContaLayout);
        tabVincularContaLayout.setHorizontalGroup(
            tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scroll1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
            .addGroup(tabVincularContaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selecioneCliente)
                    .addGroup(tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(selecioneTipoConta)
                        .addComponent(cbContas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(tabVincularContaLayout.createSequentialGroup()
                            .addComponent(label1VincularConta)
                            .addGap(18, 18, 18)
                            .addComponent(tLabel1VincularConta))
                        .addGroup(tabVincularContaLayout.createSequentialGroup()
                            .addComponent(label2VincularConta)
                            .addGap(18, 18, 18)
                            .addComponent(tLabel2VincularConta))
                        .addGroup(tabVincularContaLayout.createSequentialGroup()
                            .addComponent(label3VincularConta)
                            .addGap(18, 18, 18)
                            .addComponent(tLabel3VincularConta, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(incluirConta, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tabVincularContaLayout.setVerticalGroup(
            tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabVincularContaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selecioneCliente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scroll1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selecioneTipoConta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbContas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label1VincularConta)
                    .addComponent(tLabel1VincularConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label2VincularConta)
                    .addComponent(tLabel2VincularConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label3VincularConta)
                    .addComponent(tLabel3VincularConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(incluirConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        Guias.addTab("Vincular Conta", tabVincularConta);

        tabManipularConta.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                tabManipularContaComponentShown(evt);
            }
        });

        informarCPF.setText("Informe o CPF do cliente para listarmos suas contas:");

        Informar.setBackground(new java.awt.Color(33, 136, 56));
        Informar.setForeground(new java.awt.Color(240, 240, 240));
        Informar.setLabel("Informar");
        Informar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InformarMouseClicked(evt);
            }
        });

        tabelaManipularConta.setModel(modelo);
        tabelaManipularConta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaManipularContaMouseClicked(evt);
            }
        });
        scroll2.setViewportView(tabelaManipularConta);

        saque.setText("Saque:");

        Sacar.setBackground(new java.awt.Color(33, 136, 56));
        Sacar.setForeground(new java.awt.Color(240, 240, 240));
        Sacar.setLabel("Sacar");
        Sacar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SacarMouseClicked(evt);
            }
        });

        deposito.setText("Depósito:");

        Depositar.setBackground(new java.awt.Color(33, 136, 56));
        Depositar.setForeground(new java.awt.Color(240, 240, 240));
        Depositar.setLabel("Depositar");
        Depositar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DepositarMouseClicked(evt);
            }
        });

        VerSaldo.setBackground(new java.awt.Color(33, 136, 56));
        VerSaldo.setForeground(new java.awt.Color(240, 240, 240));
        VerSaldo.setLabel("Ver Saldo");
        VerSaldo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                VerSaldoMouseClicked(evt);
            }
        });

        Remunerar.setBackground(new java.awt.Color(33, 136, 56));
        Remunerar.setForeground(new java.awt.Color(240, 240, 240));
        Remunerar.setLabel("Remunerar");
        Remunerar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RemunerarMouseClicked(evt);
            }
        });

        saldoAtual.setText("O saldo atual é:");

        verSaldo.setText("...");

        javax.swing.GroupLayout tabManipularContaLayout = new javax.swing.GroupLayout(tabManipularConta);
        tabManipularConta.setLayout(tabManipularContaLayout);
        tabManipularContaLayout.setHorizontalGroup(
            tabManipularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabManipularContaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabManipularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabManipularContaLayout.createSequentialGroup()
                        .addComponent(informarCPF)
                        .addGap(18, 18, 18)
                        .addComponent(tInformarCPF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Informar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scroll2, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
                    .addGroup(tabManipularContaLayout.createSequentialGroup()
                        .addGroup(tabManipularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabManipularContaLayout.createSequentialGroup()
                                .addComponent(saldoAtual)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(verSaldo))
                            .addGroup(tabManipularContaLayout.createSequentialGroup()
                                .addGroup(tabManipularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deposito)
                                    .addComponent(saque))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(tabManipularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(tabManipularContaLayout.createSequentialGroup()
                                        .addComponent(tSaque, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Sacar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(tabManipularContaLayout.createSequentialGroup()
                                        .addComponent(tDeposito, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Depositar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(tabManipularContaLayout.createSequentialGroup()
                                .addComponent(VerSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Remunerar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tabManipularContaLayout.setVerticalGroup(
            tabManipularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabManipularContaLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(tabManipularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tabManipularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tInformarCPF)
                        .addComponent(informarCPF))
                    .addComponent(Informar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scroll2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(tabManipularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tabManipularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tSaque)
                        .addComponent(saque))
                    .addComponent(Sacar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabManipularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tabManipularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tDeposito)
                        .addComponent(deposito))
                    .addComponent(Depositar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabManipularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(VerSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Remunerar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabManipularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saldoAtual)
                    .addComponent(verSaldo))
                .addContainerGap(104, Short.MAX_VALUE))
        );

        Guias.addTab("Manipular Conta", tabManipularConta);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Guias)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Guias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    ////////////////////////////////////////////////////////////////////////////
    /////////////////PRIMEIRA TELA: TELA DE CADASTRO DE CLIENTES////////////////
    ////////////////////////////////////////////////////////////////////////////
    
    public final boolean containsOnlyLetter(String s) {
        boolean containsLetter = false;

        if (s != null && !s.isEmpty()) {
            for (char c: s.toCharArray()) {
                if (Character.isLetter(c) || Character.isSpaceChar(c) || Character.isWhitespace(c)) {
                    containsLetter = true;
                } else {
                    containsLetter = false;
                    break;
                }
            }
        }

        return containsLetter;
    }
    
    private void incluirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_incluirMouseClicked
        try {
            if (!"".equals(tEndereco.getText())) {
                int id = idContador;
                String nome = tNome.getText().toUpperCase();
                String sobrenome = tSobrenome.getText().toUpperCase();
                Long rg = Long.parseLong(tRG.getText());
                Long cpf = Long.parseLong(tCPF.getText());
                float salario = Float.parseFloat(tSalario.getText());
                String endereco = tEndereco.getText();

                //verifica se já existe algum cliente com o mesmo RG ou CPF
                int verificar = 0;
                for (Cliente cliente: listaDeClientes){
                    if (Objects.equals(cliente.getRG(), rg) || Objects.equals(cliente.getCPF(), cpf)) {
                        verificar = 1;
                        break;
                    }
                }

                //só pode criar um cliente que tenha o RG e CPF diferentes e maiores que zero
                //e o nome e sobrenome só podem conter letras
                if (rg >= 0 && cpf >= 0 && salario >= 0) {
                    if (verificar == 0 && containsOnlyLetter(nome) && containsOnlyLetter(sobrenome)) {
                        Cliente cliente = new Cliente(id, nome, sobrenome, rg, cpf, salario, endereco);
                        listaDeClientes.add(cliente);
                        modelo.adicionaCliente(cliente);
                        idContador++;
                    } else {
                        JOptionPane.showMessageDialog(jFrame, "O RG ou CPF talvez já existam!"
                                + "\nO nome e sobrenome só podem conter letras!", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(jFrame, "O RG, CPF e Salário devem ser positivos!", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(jFrame, "O endereço não pode ficar vazio!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } catch(NumberFormatException nfe) {
            JOptionPane.showMessageDialog(jFrame, "O RG, CPF e Salário devem ser numéricos!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_incluirMouseClicked

    private void listarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listarMouseClicked
        Collections.sort(listaDeClientes, (o1, o2) -> Integer.toString(o1.getId()).compareTo(Integer.toString(o2.getId())));
        cbOrdenar.setSelectedItem("Selecione");
        modelo.atualizarTabela(listaDeClientes);
    }//GEN-LAST:event_listarMouseClicked

    private void limparMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_limparMouseClicked
        modelo.limpaTabela();
    }//GEN-LAST:event_limparMouseClicked

    private void tabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMouseClicked
        //Pega a linha clicada
        linhaClicada = tabela.rowAtPoint(evt.getPoint());
        
        //Pega o cliente da linha clicada
        Cliente cliente = modelo.getCliente(linhaClicada);
        
        //Seta os dados nos componentes
        tNome.setText(cliente.getNome());
        tSobrenome.setText(cliente.getSobrenome());
        tRG.setText(Long.toString(cliente.getRG()));
        tCPF.setText(Long.toString(cliente.getCPF()));
        tSalario.setText(Float.toString(cliente.getSalario()));
        tEndereco.setText(cliente.getEndereco());
    }//GEN-LAST:event_tabelaMouseClicked

    private void alterarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_alterarMouseClicked
        if(linhaClicada != -1){
            try {
                if (!"".equals(tEndereco.getText())) {
                    int id = modelo.getCliente(linhaClicada).getId();
                    String nome = tNome.getText().toUpperCase();
                    String sobrenome = tSobrenome.getText().toUpperCase();
                    Long rg = Long.parseLong(tRG.getText());
                    Long cpf = Long.parseLong(tCPF.getText());
                    float salario = Float.parseFloat(tSalario.getText());
                    String endereco = tEndereco.getText();

                    int verificar = 0;
                    for (Cliente cliente: listaDeClientes){
                        if (!Objects.equals(cliente.getId(), id)) {
                            if (Objects.equals(cliente.getRG(), rg) || Objects.equals(cliente.getCPF(), cpf)) {
                                verificar = 1;
                                break;
                            }
                        }
                    }
                    
                    if (rg >= 0 && cpf >= 0 && salario >= 0) {
                        if (verificar == 0 && containsOnlyLetter(nome) && containsOnlyLetter(sobrenome)) {
                            Cliente cliente = modelo.getCliente(linhaClicada);

                            cliente.setNome(nome);
                            cliente.setSobrenome(sobrenome);
                            cliente.setRG(rg);
                            cliente.setCPF(cpf);
                            cliente.setSalario(salario);
                            cliente.setEndereco(endereco);

                            //Atualiza tabela
                            modelo.fireTableRowsUpdated(linhaClicada, linhaClicada);
                        } else {
                            JOptionPane.showMessageDialog(jFrame, "O RG ou CPF talvez já existam!"
                                    + "\nO nome e sobrenome só podem conter letras!", "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(jFrame, "O RG, CPF e Salário devem ser positivos!", 
                                "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(jFrame, "O endereço não pode ficar vazio!", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } catch(NumberFormatException nfe) {
                JOptionPane.showMessageDialog(jFrame, "O RG, CPF e Salário devem ser numéricos!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_alterarMouseClicked

    private void excluirContas(int[] linhasSelecionadas) {
        List<ContaCorrente> listaExcluirContaCorrente = new ArrayList();
        List<ContaInvestimento> listaExcluirContaInvestimento = new ArrayList();
                
        for (int i = 0; i < linhasSelecionadas.length; i++) {
            for (ContaCorrente conta: listaDeContasCorrente){
                if (modelo.getCliente(linhasSelecionadas[i]) == conta.getDono()) {
                    listaExcluirContaCorrente.add(conta);
                }
            }
        }
        
        for (ContaCorrente conta: listaExcluirContaCorrente){
            listaDeContasCorrente.remove(conta);
            modeloContaCorrente.removeContaCorrente(conta);
        }
        
        for (int i = 0; i < linhasSelecionadas.length; i++) {
            for (ContaInvestimento conta: listaDeContasInvestimento){
                if (modelo.getCliente(linhasSelecionadas[i]) == conta.getDono()) {
                    listaExcluirContaInvestimento.add(conta);
                }
            }
        }
        
        for (ContaInvestimento conta: listaExcluirContaInvestimento){
            listaDeContasInvestimento.remove(conta);
            modeloContaInvestimento.removeContaInvestimento(conta);
        }
    }
    
    private void excluirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_excluirMouseClicked
        if(linhaClicada != -1){
            int verificar;
        
            Object[] options = { "Excluir", "Cancelar" };
            verificar = JOptionPane.showOptionDialog(jFrame, "Deseja mesmo excluir? "
                    + "Esta ação também excluirá todas as contas deste cliente.", 
                    "Exclusão", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

            if(verificar == 0) {
                int[] linhasSelecionadas = tabela.getSelectedRows();
                List<Cliente> listaExcluir = new ArrayList();
                
                excluirContas(linhasSelecionadas);
                
                for (int i = 0; i < linhasSelecionadas.length; i++) {
                    Cliente cliente = modelo.getCliente(linhasSelecionadas[i]);
                    listaExcluir.add(cliente);
                }

                for (Cliente cliente: listaExcluir){
                    listaDeClientes.remove(cliente);
                    modelo.removeCliente(cliente);
                }

                linhaClicada = -1;
            }
        }
    }//GEN-LAST:event_excluirMouseClicked

    private void cbOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOrdenarActionPerformed
        String ordenar = cbOrdenar.getSelectedItem().toString();
        
        switch (ordenar) {
            case "Selecione":
                Collections.sort(listaDeClientes, (o1, o2) -> Integer.toString(o1.getId()).compareTo(Integer.toString(o2.getId())));
                break;
            case "Nome":
                Collections.sort(listaDeClientes, (o1, o2) -> o1.getNome().compareTo(o2.getNome()));
                break;
            case "Sobrenome":
                Collections.sort(listaDeClientes, (o1, o2) -> o1.getSobrenome().compareTo(o2.getSobrenome()));
                break;
            case "Salário":
                Collections.sort(listaDeClientes);
                break;
        }
        
        modelo.atualizarTabela(listaDeClientes);
    }//GEN-LAST:event_cbOrdenarActionPerformed

    private void listarPor(String combo, String listar) {
        List<Cliente> novaListaDeCientes = new ArrayList();
        
        try {
            switch (combo) {
                case "Nome":
                    for (Cliente cliente: listaDeClientes){
                        if(cliente.getNome().contains(listar)) {
                            novaListaDeCientes.add(cliente);
                        }
                    }

                    break;
                case "Sobrenome":
                    for (Cliente cliente: listaDeClientes){
                        if(cliente.getSobrenome().contains(listar)) {
                            novaListaDeCientes.add(cliente);
                        }
                    }

                    break;
                case "RG":
                    Long listarRG = Long.parseLong(listar);
                    for (Cliente cliente: listaDeClientes){
                        if(cliente.getRG().equals((listarRG))) {
                            novaListaDeCientes.add(cliente);
                        }
                    }

                    break;
                case "CPF":
                    Long listarCPF = Long.parseLong(listar);
                    for (Cliente cliente: listaDeClientes){
                        if(cliente.getCPF().equals((listarCPF))) {
                            novaListaDeCientes.add(cliente);
                        }
                    }

                    break;
            }

            modelo.atualizarTabela(novaListaDeCientes);
        } catch(NumberFormatException nfe) {
            JOptionPane.showMessageDialog(jFrame, "O RG e CPF devem ser numéricos!", "Erro", JOptionPane.ERROR_MESSAGE);
            cbListarPor.setSelectedItem("Nome");
        }
    }
    
    private void usarListarPor() {
        String comboOpcaoListarPor = cbListarPor.getSelectedItem().toString();
        String listarPor = tListarPor.getText();
        
        if (listarPor != null && !"".equals(listarPor))
            listarPor(comboOpcaoListarPor, listarPor);
    }
    
    private void cbListarPorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbListarPorActionPerformed
        usarListarPor();
    }//GEN-LAST:event_cbListarPorActionPerformed

    private void tListarPorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tListarPorKeyReleased
        usarListarPor();
    }//GEN-LAST:event_tListarPorKeyReleased

    
    
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////SEGUNDA TELA: TELA DE VINCULAR CONTAS///////////////////
    ////////////////////////////////////////////////////////////////////////////
    
    private void esconderComponentesVincularConta() {
        selecioneTipoConta.setVisible(false);
        cbContas.setVisible(false);
        
        label1VincularConta.setText("");
        label2VincularConta.setText("");
        label3VincularConta.setText("");
        
        tLabel1VincularConta.setText("");
        tLabel2VincularConta.setText("");
        tLabel3VincularConta.setText("");
        
        tLabel1VincularConta.setVisible(false);
        tLabel2VincularConta.setVisible(false);
        tLabel3VincularConta.setVisible(false);
        
        incluirConta.setVisible(false);
    }
    
    private void tabVincularContaComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_tabVincularContaComponentShown
        tabelaVincularConta.setModel(modeloVincularConta);
        Collections.sort(listaDeClientes, (o1, o2) -> Integer.toString(o1.getId()).compareTo(Integer.toString(o2.getId())));
        modeloVincularConta.atualizarTabela(listaDeClientes);
        
        esconderComponentesVincularConta();
    }//GEN-LAST:event_tabVincularContaComponentShown

    private void tabelaVincularContaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaVincularContaMouseClicked
        //Pega a linha clicada
        linhaClicadaVincularConta = tabelaVincularConta.rowAtPoint(evt.getPoint());
        
        //Pega o cliente da linha clicada
        Cliente cliente = modelo.getCliente(linhaClicadaVincularConta);
        
        int verificarContaCorrente = 0;
        for (ContaCorrente conta: listaDeContasCorrente){
            if (conta.getDono() == cliente) {
                verificarContaCorrente = 1;
                break;
            }
        }
        
        int verificarContaInvestimento = 0;
        if (verificarContaCorrente == 0) {
            for (ContaInvestimento conta: listaDeContasInvestimento){
                if (conta.getDono() == cliente) {
                    verificarContaInvestimento = 1;
                    break;
                }
            }
        }
        
        cbContas.removeAllItems();
        cbContas.addItem("Selecione");
        
        if (verificarContaCorrente == 1) {
            cbContas.addItem("Conta Corrente");
        } else if (verificarContaInvestimento == 1) {
            cbContas.addItem("Conta Investimento");
        } else {
            cbContas.addItem("Conta Corrente");
            cbContas.addItem("Conta Investimento");
        }
        
        selecioneTipoConta.setVisible(true);
        cbContas.setVisible(true);
        tabVincularConta.revalidate();
        tabVincularConta.repaint();
    }//GEN-LAST:event_tabelaVincularContaMouseClicked

    private void cbContasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbContasItemStateChanged
        //Pega qual tipo de conta foi escolhida
        if (cbContas.getSelectedItem() != null) {
            String comboConta = cbContas.getSelectedItem().toString();
        
            switch (comboConta) {
                case "Conta Corrente":
                    label1VincularConta.setText("Depósito inicial (valor em R$):");
                    label2VincularConta.setText("Limite da conta (valor em R$):");
                    label3VincularConta.setText("");

                    tLabel1VincularConta.setVisible(true);
                    tLabel2VincularConta.setVisible(true);
                    tLabel3VincularConta.setVisible(false);
                    
                    incluirConta.setVisible(true);

                    break;
                case "Conta Investimento":
                    label1VincularConta.setText("Montante Mínimo (valor em R$):");
                    label2VincularConta.setText("Depósito Mínimo (valor em R$):");
                    label3VincularConta.setText("Depósito Inicial (valor em R$):");

                    tLabel1VincularConta.setVisible(true);
                    tLabel2VincularConta.setVisible(true);
                    tLabel3VincularConta.setVisible(true);
                    
                    incluirConta.setVisible(true);

                    break;
            }
            
            tabVincularConta.revalidate();
            tabVincularConta.repaint();
        }
    }//GEN-LAST:event_cbContasItemStateChanged

    private void incluirContaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_incluirContaMouseClicked
        //Pega o cliente da linha clicada
        Cliente cliente = modelo.getCliente(linhaClicadaVincularConta);

        //Pega qual tipo de conta foi escolhida
        String comboConta = cbContas.getSelectedItem().toString();

        switch (comboConta) {
            case "Conta Corrente":
                try {
                    if (!"".equals(tLabel1VincularConta.getText()) && !"".equals(tLabel2VincularConta.getText())) {
                        int numero = numeroContadorCorrente;
                        double saldo = Double.parseDouble(tLabel1VincularConta.getText());
                        Cliente dono = cliente;
                        double limiteDaConta = Double.parseDouble(tLabel2VincularConta.getText());

                        ContaCorrente conta = new ContaCorrente(numero, saldo, dono, limiteDaConta);
                        listaDeContasCorrente.add(conta);
                        modeloContaCorrente.adicionaContaCorrente(conta);
                        numeroContadorCorrente++;
                        
                        JOptionPane.showMessageDialog(jFrame, "Conta vinculada com sucesso!", 
                            "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                        
                        esconderComponentesVincularConta();
                    } else {
                        JOptionPane.showMessageDialog(jFrame, "Os campos não podem ficar vazios!", 
                            "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                } catch(NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(jFrame, "Os valores nos campos devem ser numéricos!", 
                            "Erro", JOptionPane.ERROR_MESSAGE);
                }
                
                break;
            case "Conta Investimento":
                try {
                    if (!"".equals(tLabel1VincularConta.getText()) && 
                        !"".equals(tLabel2VincularConta.getText()) && 
                        !"".equals(tLabel3VincularConta.getText())) {
                        
                        int numero = numeroContadorInvestimento;
                        double saldo = Double.parseDouble(tLabel3VincularConta.getText());
                        Cliente dono = cliente;
                        double depositoMinimo = Double.parseDouble(tLabel2VincularConta.getText());
                        double montanteMinimo = Double.parseDouble(tLabel1VincularConta.getText());
                        
                        if (saldo >= montanteMinimo && saldo >= depositoMinimo) {
                            ContaInvestimento conta = new ContaInvestimento(numero, saldo, dono, depositoMinimo, montanteMinimo);
                            listaDeContasInvestimento.add(conta);
                            modeloContaInvestimento.adicionaContaInvestimento(conta);
                            numeroContadorInvestimento++;

                            JOptionPane.showMessageDialog(jFrame, "Conta vinculada com sucesso!", 
                                "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                            
                            esconderComponentesVincularConta();
                        } else {
                            JOptionPane.showMessageDialog(jFrame, "O depósito inicial não pode ser menor que o montante mínimo"
                                    + " ou que o depósito mínimo", "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(jFrame, "Os campos não podem ficar vazios!", 
                            "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                } catch(NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(jFrame, "Os valores nos campos devem ser numéricos!", 
                            "Erro", JOptionPane.ERROR_MESSAGE);
                }
                
                break;
        }
    }//GEN-LAST:event_incluirContaMouseClicked

    
    
    ////////////////////////////////////////////////////////////////////////////
    ///////////////////TERCEIRA TELA: TELA DE MANIPULAR CONTAS//////////////////
    ////////////////////////////////////////////////////////////////////////////
    
    private void visualizarComponentesManipularConta(boolean visibilidade) {
        saque.setVisible(visibilidade);
        tSaque.setVisible(visibilidade);
        tSaque.setText("");
        Sacar.setVisible(visibilidade);
        
        deposito.setVisible(visibilidade);
        tDeposito.setVisible(visibilidade);
        tDeposito.setText("");
        Depositar.setVisible(visibilidade);
        
        VerSaldo.setVisible(visibilidade);
        Remunerar.setVisible(visibilidade);
    }
    
    private void tabManipularContaComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_tabManipularContaComponentShown
        visualizarComponentesManipularConta(false);
        tabelaManipularConta.setVisible(false);
        saldoAtual.setVisible(false);
        verSaldo.setVisible(false);
    }//GEN-LAST:event_tabManipularContaComponentShown

    private void InformarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InformarMouseClicked
        try {
            Long cpf = Long.parseLong(tInformarCPF.getText());
            
            if (cpf >= 0) {
                listaManipulaContaCorrente.clear();
                listaManipulaContaInvestimento.clear();
                
                int verificar = 0;
                for (Cliente cliente: listaDeClientes){
                    if (Objects.equals(cliente.getCPF(), cpf)) {
                        int verificarContaCorrente = 0;
                        for (ContaCorrente conta: listaDeContasCorrente){
                            if (conta.getDono() == cliente) {
                                listaManipulaContaCorrente.add(conta);
                                verificarContaCorrente++;
                            }
                        }

                        if (verificarContaCorrente == 0) {
                            for (ContaInvestimento conta: listaDeContasInvestimento){
                                if (conta.getDono() == cliente) {
                                    listaManipulaContaInvestimento.add(conta);
                                }
                            }
                        }
                        
                        verificar = 1;
                        break;
                    }
                }
                
                if (verificar == 1) {
                    if (listaManipulaContaCorrente.size() > 0) {
                        tabelaManipularConta.setVisible(true);
                        tabelaManipularConta.setModel(modeloContaCorrente);
                        modeloContaCorrente.atualizarTabela(listaManipulaContaCorrente);
                    } else if (listaManipulaContaInvestimento.size() > 0) {
                        tabelaManipularConta.setVisible(true);
                        tabelaManipularConta.setModel(modeloContaInvestimento);
                        modeloContaInvestimento.atualizarTabela(listaManipulaContaInvestimento);
                    } else {
                        JOptionPane.showMessageDialog(jFrame, "O cliente informado não possui nenhuma conta!", 
                            "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(jFrame, "CPF não encontrado na lista de clientes!", 
                            "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(jFrame, "O CPF deve ser positivo!", 
                        "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } catch(NumberFormatException nfe) {
            JOptionPane.showMessageDialog(jFrame, "O CPF deve ser numérico!", 
                    "Erro", JOptionPane.ERROR_MESSAGE);
        }  
        
        visualizarComponentesManipularConta(false);
        saldoAtual.setVisible(false);
        verSaldo.setVisible(false);
    }//GEN-LAST:event_InformarMouseClicked

    private void tabelaManipularContaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaManipularContaMouseClicked
        //Pega a linha clicada
        linhaClicadaManipularConta = tabelaManipularConta.rowAtPoint(evt.getPoint());
        visualizarComponentesManipularConta(true);
    }//GEN-LAST:event_tabelaManipularContaMouseClicked
    
    private void SacarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SacarMouseClicked
        saldoAtual.setVisible(false);
        verSaldo.setVisible(false);
        
        try {
            double saque = Double.parseDouble(tSaque.getText());
            boolean resultadoSaque;
            
            if (tabelaManipularConta.getModel() == modeloContaCorrente) {
                ContaCorrente conta = modeloContaCorrente.getContaCorrente(linhaClicadaManipularConta);
                resultadoSaque = conta.saca(saque);
                
                if (resultadoSaque) {
                    JOptionPane.showMessageDialog(jFrame, "O Saque foi concluído!", 
                            "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
                    modeloContaCorrente.atualizarTabela(listaManipulaContaCorrente);
                }
            }
            
            if (tabelaManipularConta.getModel() == modeloContaInvestimento) {
                ContaInvestimento conta = modeloContaInvestimento.getContaInvestimento(linhaClicadaManipularConta);
                resultadoSaque = conta.saca(saque);
                
                if (resultadoSaque) {
                    JOptionPane.showMessageDialog(jFrame, "O Saque foi concluído!", 
                            "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
                    modeloContaInvestimento.atualizarTabela(listaManipulaContaInvestimento);
                }
            }
        } catch(NumberFormatException nfe) {
            JOptionPane.showMessageDialog(jFrame, "O Saque deve ser numérico!", 
                    "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SacarMouseClicked

    private void DepositarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DepositarMouseClicked
        saldoAtual.setVisible(false);
        verSaldo.setVisible(false);
        
        try {
            double deposito = Double.parseDouble(tDeposito.getText());
            boolean resultadoDeposito;
            
            if (tabelaManipularConta.getModel() == modeloContaCorrente) {
                ContaCorrente conta = modeloContaCorrente.getContaCorrente(linhaClicadaManipularConta);
                resultadoDeposito = conta.deposita(deposito);
                
                if (resultadoDeposito) {
                    JOptionPane.showMessageDialog(jFrame, "O Depósito foi concluído!", 
                            "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
                    modeloContaCorrente.atualizarTabela(listaManipulaContaCorrente);
                }
            }
            
            if (tabelaManipularConta.getModel() == modeloContaInvestimento) {
                ContaInvestimento conta = modeloContaInvestimento.getContaInvestimento(linhaClicadaManipularConta);
                resultadoDeposito = conta.deposita(deposito);
                
                if (resultadoDeposito) {
                    JOptionPane.showMessageDialog(jFrame, "O Depósito foi concluído!", 
                            "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
                    modeloContaInvestimento.atualizarTabela(listaManipulaContaInvestimento);
                }
            }
        } catch(NumberFormatException nfe) {
            JOptionPane.showMessageDialog(jFrame, "O Depósito deve ser numérico!", 
                    "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DepositarMouseClicked

    private void VerSaldoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VerSaldoMouseClicked
        saldoAtual.setVisible(true);
        verSaldo.setVisible(true);
        
        if (tabelaManipularConta.getModel() == modeloContaCorrente) {
            ContaCorrente conta = modeloContaCorrente.getContaCorrente(linhaClicadaManipularConta);
            String saldoDaConta = Double.toString(conta.getSaldo());

            verSaldo.setText("R$" + saldoDaConta);
        }
            
        if (tabelaManipularConta.getModel() == modeloContaInvestimento) {
            ContaInvestimento conta = modeloContaInvestimento.getContaInvestimento(linhaClicadaManipularConta);
            String saldoDaConta = Double.toString(conta.getSaldo());

            verSaldo.setText("R$" + saldoDaConta);
        }
    }//GEN-LAST:event_VerSaldoMouseClicked

    private void RemunerarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RemunerarMouseClicked
        saldoAtual.setVisible(false);
        verSaldo.setVisible(false);
        
        if (tabelaManipularConta.getModel() == modeloContaCorrente) {
            ContaCorrente conta = modeloContaCorrente.getContaCorrente(linhaClicadaManipularConta);
            conta.remunera();
            modeloContaCorrente.atualizarTabela(listaManipulaContaCorrente);
        }
            
        if (tabelaManipularConta.getModel() == modeloContaInvestimento) {
            ContaInvestimento conta = modeloContaInvestimento.getContaInvestimento(linhaClicadaManipularConta);
            conta.remunera();
            modeloContaInvestimento.atualizarTabela(listaManipulaContaInvestimento);
        }
        
        JOptionPane.showMessageDialog(jFrame, "A remuneração foi concluída!", 
                            "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_RemunerarMouseClicked
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SistemaBancario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SistemaBancario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CPF;
    private java.awt.Button Depositar;
    private javax.swing.JLabel Endereco;
    private javax.swing.JTabbedPane Guias;
    private java.awt.Button Informar;
    private javax.swing.JLabel ListarPor;
    private javax.swing.JLabel Nome;
    private javax.swing.JLabel Ordenar;
    private javax.swing.JLabel RG;
    private java.awt.Button Remunerar;
    private java.awt.Button Sacar;
    private javax.swing.JLabel Salario;
    private javax.swing.JLabel Sobrenome;
    private java.awt.Button VerSaldo;
    private java.awt.Button alterar;
    private javax.swing.JComboBox<String> cbContas;
    private javax.swing.JComboBox<String> cbListarPor;
    private javax.swing.JComboBox<String> cbOrdenar;
    private javax.swing.JLabel deposito;
    private java.awt.Button excluir;
    private java.awt.Button incluir;
    private java.awt.Button incluirConta;
    private javax.swing.JLabel informarCPF;
    private javax.swing.JLabel label1VincularConta;
    private javax.swing.JLabel label2VincularConta;
    private javax.swing.JLabel label3VincularConta;
    private java.awt.Button limpar;
    private java.awt.Button listar;
    private javax.swing.JLabel saldoAtual;
    private javax.swing.JLabel saque;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JScrollPane scroll1;
    private javax.swing.JScrollPane scroll2;
    private javax.swing.JLabel selecioneCliente;
    private javax.swing.JLabel selecioneTipoConta;
    private javax.swing.JTextField tCPF;
    private javax.swing.JTextField tDeposito;
    private javax.swing.JTextField tEndereco;
    private javax.swing.JTextField tInformarCPF;
    private javax.swing.JTextField tLabel1VincularConta;
    private javax.swing.JTextField tLabel2VincularConta;
    private javax.swing.JTextField tLabel3VincularConta;
    private javax.swing.JTextField tListarPor;
    private javax.swing.JTextField tNome;
    private javax.swing.JTextField tRG;
    private javax.swing.JTextField tSalario;
    private javax.swing.JTextField tSaque;
    private javax.swing.JTextField tSobrenome;
    private javax.swing.JPanel tabCadastrarCliente;
    private javax.swing.JPanel tabManipularConta;
    private javax.swing.JPanel tabVincularConta;
    private javax.swing.JTable tabela;
    private javax.swing.JTable tabelaManipularConta;
    private javax.swing.JTable tabelaVincularConta;
    private javax.swing.JLabel verSaldo;
    // End of variables declaration//GEN-END:variables
}
